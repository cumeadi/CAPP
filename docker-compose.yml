version: '3.8'

services:
  # CAPP Application
  capp-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_DIR=applications/capp
    container_name: capp-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://capp_user:capp_password@postgres:5432/capp_db
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - APTOS_NODE_URL=https://fullnode.mainnet.aptoslabs.com
      - SECRET_KEY=your-secret-key-here
      - APTOS_PRIVATE_KEY=your-aptos-private-key
      - APTOS_ACCOUNT_ADDRESS=your-aptos-account-address
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - ./logs:/app/logs
    networks:
      - capp-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: capp-postgres
    environment:
      - POSTGRES_DB=capp_db
      - POSTGRES_USER=capp_user
      - POSTGRES_PASSWORD=capp_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - capp-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: capp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - capp-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: capp-kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - capp-network
    restart: unless-stopped
    depends_on:
      - zookeeper

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: capp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - capp-network
    restart: unless-stopped

  # Temporal (Workflow Orchestration)
  temporal:
    image: temporalio/auto-setup:1.22.3
    container_name: capp-temporal
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=capp_user
      - POSTGRES_PWD=capp_password
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    volumes:
      - temporal_data:/etc/temporal/config/dynamicconfig
    networks:
      - capp-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Temporal Web UI
  temporal-web:
    image: temporalio/web:1.15.0
    container_name: capp-temporal-web
    ports:
      - "8088:8088"
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    networks:
      - capp-network
    restart: unless-stopped
    depends_on:
      - temporal

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: capp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - capp-network
    restart: unless-stopped

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: capp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - capp-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: capp-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - capp-network
    restart: unless-stopped

  # Elasticsearch (Log Aggregation)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: capp-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - capp-network
    restart: unless-stopped

  # Kibana (Log Visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: capp-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - capp-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Filebeat (Log Shipper)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: capp-filebeat
    user: root
    volumes:
      - ./logs:/var/log/capp
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - capp-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  temporal_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  capp-network:
    driver: bridge 