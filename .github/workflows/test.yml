name: Test and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy bandit safety

      - name: Run Black (code formatting check)
        run: black --check applications/capp tests

      - name: Run isort (import sorting check)
        run: isort --check-only applications/capp tests

      - name: Run Flake8 (linting)
        run: flake8 applications/capp tests --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Bandit (security checks)
        run: bandit -r applications/capp -ll -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-security-report
          path: bandit-report.json

      - name: Check dependencies for vulnerabilities
        run: safety check --json || true

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: capp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r applications/capp/requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-xdist tenacity email-validator

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/capp_test
        run: |
          # Create tables (would normally use alembic)
          python -c "
          import asyncio
          from applications.capp.capp.core.database import engine, Base

          async def init_db():
              async with engine.begin() as conn:
                  await conn.run_sync(Base.metadata.create_all)

          asyncio.run(init_db())
          "

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/capp_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
          DEBUG: false
          # Mock MMO credentials for testing
          MMO_MPESA_CONSUMER_KEY: test_key
          MMO_MPESA_CONSUMER_SECRET: test_secret
          MMO_MPESA_BUSINESS_SHORT_CODE: "174379"
          MMO_MPESA_PASSKEY: test_passkey
          MTN_MOMO_SUBSCRIPTION_KEY: test_subscription_key
          MTN_MOMO_API_USER: 00000000-0000-0000-0000-000000000000
          MTN_MOMO_API_KEY: test_api_key
          MTN_MOMO_ENVIRONMENT: sandbox
          AIRTEL_MONEY_CLIENT_ID: test_client_id
          AIRTEL_MONEY_CLIENT_SECRET: test_client_secret
          AIRTEL_MONEY_API_KEY: test_api_key
          AIRTEL_MONEY_ENVIRONMENT: staging
        run: |
          pytest tests/integration/ -v --cov=applications.capp.capp --cov-report=xml --cov-report=term-missing --tb=short

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: integration-tests
          name: codecov-${{ matrix.python-version }}

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r applications/capp/requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock tenacity email-validator

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=applications.capp.capp --cov-report=xml --cov-report=term-missing --tb=short || true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unit-tests
          name: codecov-unit-${{ matrix.python-version }}

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test, test-unit]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "‚ùå Code quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "‚ùå Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.test-unit.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Unit tests failed (non-blocking)"
          fi
          echo "‚úÖ All required checks passed"

  # Comment PR with test results
  comment-pr:
    name: Comment Test Results on PR
    runs-on: ubuntu-latest
    needs: [lint, test, test-unit]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Create comment body
        id: comment
        run: |
          cat << EOF > comment.md
          ## üß™ Test Results

          | Check | Status |
          |-------|--------|
          | Code Quality | ${{ needs.lint.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Integration Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Unit Tests | ${{ needs.test-unit.result == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Failed' }} |

          ### üìä Coverage
          Coverage reports are available in the workflow artifacts.

          ---
          **Integration Tests**: 110+ test cases across M-Pesa, MTN MoMo, and Airtel Money
          **Python Versions**: 3.9, 3.10, 3.11
          EOF

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
